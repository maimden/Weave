<?xml version="1.0" encoding="utf-8"?>

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="weave.ui.*"
    xmlns="weave.ui.*"
    width="100%" height="100%"
	creationComplete="handleCreationComplete()">
	<mx:HBox width="100%">
		<mx:Label id="title" fontWeight="bold"/>
		<mx:Spacer width="100%"/>
		<mx:Label id="idDisplay"/>
	</mx:HBox>
    <mx:TabNavigator width="{width}" height="100%">
        <ui:MetadataGrid id="publicMetaGrid"
			label="Public ({publicMetaGrid.grid.dataProvider ? publicMetaGrid.grid.dataProvider.length : 0}){publicMetaGrid.metadataChanged?'*':''}"
            paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
        <ui:MetadataGrid id="privateMetaGrid"
			label="Private ({privateMetaGrid.grid.dataProvider ? privateMetaGrid.grid.dataProvider.length : 0}){privateMetaGrid.metadataChanged?'*':''}"
            paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
    </mx:TabNavigator>
    <mx:HBox width="100%">
		<mx:Spacer width="100%"/>
        <mx:Button label="Save" enabled="{isChanged}" click="saveChanges()"/>
        <mx:Button label="Cancel" enabled="{isChanged}" click="refresh()"/>
    </mx:HBox>
<mx:Script>
<![CDATA[
	import mx.binding.utils.BindingUtils;
	import mx.events.DataGridEvent;
	import mx.utils.ObjectUtil;
	
	import weave.api.data.ColumnMetadata;
	import weave.api.getCallbackCollection;
	import weave.services.Admin;
	import weave.services.beans.Entity;
	import weave.services.beans.EntityMetadata;
	
	public function handleCreationComplete():void
	{
		publicMetaGrid.defaultPropertyName = ColumnMetadata.TITLE;
		publicMetaGrid.selectablePropertyNames = EntityMetadata.getSuggestedPublicPropertyNames();
		privateMetaGrid.selectablePropertyNames = EntityMetadata.getSuggestedPrivatePropertyNames();
		BindingUtils.bindSetter(detectChange, publicMetaGrid, 'metadata');
		BindingUtils.bindSetter(detectChange, privateMetaGrid, 'metadata');
		getCallbackCollection(Admin.entityCache).addImmediateCallback(this, handleEntityCache);
		publicMetaGrid.grid.addEventListener(DataGridEvent.ITEM_EDIT_BEGIN, onItemEditBegin);
		privateMetaGrid.grid.addEventListener(DataGridEvent.ITEM_EDIT_BEGIN, onItemEditBegin);
	}
	private function onItemEditBegin(event:Event = null):void
	{
		if (event)
			callLater(onItemEditBegin);
		else
			isChanged = true;
	}

	[Bindable] private var publicPropertyCount:int = 0;
	[Bindable] private var privatePropertyCount:int = 0;
	[Bindable] public var isChanged:Boolean = false;
	
	private var _targetItems:Array;
	[Bindable] public function get targetItems():Array
	{
		return _targetItems;
	}
	public function set targetItems(items:Array):void
	{
		_targetItems = items;
		refresh();
	}
	
	private function refresh():void
	{
		if (_targetItems == null || _targetItems.length == 0)
		{
			this.enabled = false;
			title.text = lang('Metadata for selected item(s)');
			idDisplay.text = '';
			publicMetaGrid.metadata = null;
			privateMetaGrid.metadata = null;
			return;
		}
		this.enabled = true;
		
		var publicMetadata:Object;
		var privateMetadata:Object;
		
		for (var i:int = 0; i < _targetItems.length; i++)
		{
			var entity:Entity = getEntityFromSelectedItem(_targetItems[i]);
			
			if (i == 0)
			{
				if (_targetItems.length == 1)
				{
					var type:String = entity.getTypeString() || lang('item');
					title.text = lang('Metadata for selected {0}', type.toLowerCase());
					idDisplay.text = lang('id={0}', entity.id);
				}
				else
				{
					title.text = lang('Metadata for selected {0} items', _targetItems.length);
					idDisplay.text = '';
				}
				
				publicMetadata = ObjectUtil.copy(entity.publicMetadata);
				privateMetadata = ObjectUtil.copy(entity.privateMetadata);
			}
			else
			{
				combineMetadata(entity.publicMetadata, publicMetadata);
				combineMetadata(entity.privateMetadata, privateMetadata);
			}
		}
		
        publicMetaGrid.metadata = publicMetadata;
        privateMetaGrid.metadata = privateMetadata;
		
		detectChange();
	}
	
	private function combineMetadata(newValuesInput:Object, combinedValuesOutput:Object):void
	{
		for each (var arg:Object in arguments)
			for (var name:String in arg)
				if (newValuesInput[name] != combinedValuesOutput[name])
					combinedValuesOutput[name] = MetadataGridItem.MULTIPLE_VALUES_PLACEHOLDER;
	}
	
	private function getEntityFromSelectedItem(node_or_id:Object):Entity
	{
		var entity:Entity;
		var node:EntityNode = node_or_id as EntityNode;
		if (node)
			entity = node.getEntity();
		else
			entity = Admin.instance.entityCache.getEntity(int(node_or_id));
		return entity;
	}

    private function detectChange(..._):void
    {
		isChanged = publicMetaGrid.metadataChanged || privateMetaGrid.metadataChanged;
    }
    private function saveChanges():void
    {
		if (_targetItems == null || _targetItems.length == 0)
			return;
		
		var diff:EntityMetadata = new EntityMetadata();
		diff.privateMetadata = privateMetaGrid.metadata;
		diff.publicMetadata = publicMetaGrid.metadata;
		
		for each (var item:Object in _targetItems)
		{
			var entity:Entity = getEntityFromSelectedItem(item);
	        Admin.entityCache.update_metadata(entity.id, diff);
		}
    }
	
	private function handleEntityCache():void
	{
		refresh();
	}
]]>
</mx:Script>
</mx:VBox>
