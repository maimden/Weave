<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.ILinkableObjectEditor"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{_csvDataSource ? 'Edit' : 'Add'} CSV Data Source"/>
	<mx:HBox>
		<mx:Label text="Source Name *" width="140"/>
		<mx:TextInput id="sourceName" change="keyType.text=sourceName.text" width="200" cornerRadius="5" borderStyle="solid"/><!--rounded corners don't work if borderstyle is not mentioned-->
	</mx:HBox>
	<mx:HBox>
		<mx:Label text="{lang('Source URL')}" width="140"/>
		<mx:TextInput change="handleURLTextChange()" id="url" width="300" cornerRadius="5" borderStyle="solid" toolTip="{lang('enter the url of your CSV source file e.g. : http://vis.weave.com/MA_municipal_indicators.csv')}"/>
	</mx:HBox>
	<mx:VBox width="100%" enabled="{url.text?false:true}">
		<mx:Label width="100%" textAlign="center" text="OR" fontWeight="bold"/>
		<mx:HBox>
			<mx:Label text="{lang('Open local CSV file')}" width="140"/>
			<mx:Button label="{lang('Browse')}" click="browseForFiles()"/>
			<mx:Label id="uploadMessage" color="0xFF0000" text="{lang('loaded')}" visible="false"/>
		</mx:HBox>
		<mx:Label width="100%" textAlign="center" text="{lang('OR')}" fontWeight="bold"/>
		<mx:HBox>
			<mx:Label text="{lang('Paste/Edit CSV Data')}" width="140"/>
			<mx:TextArea id="csvTextArea" change="updateCSVDataString(csvTextArea.text)" width="300" height="100" cornerRadius="5" borderStyle="solid"/>
		</mx:HBox>
		<mx:Button enabled="false" label="{lang('View data in Grid')}" id="showGridButton" click="showGrid()"/>
	</mx:VBox>
	<mx:HBox>
		<mx:Label text="Key Type *" width="140"/>
		<mx:TextInput id="keyType" width="200" cornerRadius="5" borderStyle="solid" toolTip="{lang('enter key type like US State Fips Code,etc. ')}"/>
	</mx:HBox>
	<mx:HBox>
		<mx:Label text="{lang('Key Column')}" width="140"/>
		<mx:TextInput id="keyColumnName" width="200" cornerRadius="5" borderStyle="solid" toolTip="{lang('enter the column name that uniquely identifies each row in the data set')}"/>
	</mx:HBox>
	<mx:Spacer/>
	<mx:Label text="* = required"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.data.DataSources.CSVDataSource;
			import weave.editors.managers.EditDataGridPanel;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				keyType.text = sourceName.text = Weave.root.generateUniqueName("CSVDataSource");
			}
			
			[Bindable] private var _csvDataSource:CSVDataSource = null;
			public function setTarget(object:ILinkableObject):void
			{
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				_csvDataSource = object as CSVDataSource;
				if (_csvDataSource)
				{
					sourceName.text = Weave.root.getName(_csvDataSource);
					url.text = _csvDataSource.url.value;
					keyColumnName.text = _csvDataSource.keyColName.value;
					keyType.text = _csvDataSource.keyType.value;
					csvTextArea.text = _csvDataSource.csvDataString.value;
					updateCSVDataString(_csvDataSource.csvDataString.value);
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
					showGridButton.enabled = true;
				}
			}
			
			public function applyChanges():void
			{
				try
				{
					_csvDataSource.url.value = url.text;
					_csvDataSource.keyColName.value = keyColumnName.text;
					_csvDataSource.keyType.value = keyType.text;
					_csvDataSource.csvDataString.value = csvDataString;
					Alert.show(lang("Changes saved."))
				}
				catch(e:Error)
				{
					Alert.show(lang("Changes could not be saved. ") + e.message,lang("Error"));
				}
			}
			
			
			private var _fileLoader:FileReference = null;
			/**
			* browseForfiles: opens up a file browser window to upload CSV files 
			**/
			private function browseForFiles():void
			{
				if(_fileLoader == null)
				{
					_fileLoader = new FileReference();
					_fileLoader.addEventListener(Event.SELECT, handleDatasetSelected);
					_fileLoader.addEventListener(Event.COMPLETE, handleDatasetLoaded);
				}
				
				_fileLoader.browse([new FileFilter("CSV", "*.csv")]);
			}
			
			
			private function handleDatasetSelected(event:Event):void
			{
				_fileLoader.load();
			}
			
			/**
			 * this variable will be updated only when a file is uploaded or CSV string data is added to the text area.
			 * 
			 **/
			public var csvDataString:String = "";
			
			private function updateCSVDataString(dataString:String):void
			{
				csvDataString = dataString;
				if (dataString)
				{
					var tempArray:Array = WeaveAPI.CSVParser.parseCSV(csvDataString);
					headerArray = tempArray[0];
					//this is showGridButton is disabled only if a file has been loaded as the source
					showGridButton.enabled = true;
					
					//this is set to false because this function might be called from Text Area change.
					uploadMessage.visible = false;
					
					//clearing the Source URL text input
					url.text = "";
				}
			}
			
			private var csvDataArray:Array = [];
			private var csvByteArray:ByteArray = null;
			//this will hold the header columns as was loaded when the data is initially loaded.
			//This is done so that the data gird shows the columns in the same order it was uploaded.
			private var headerArray:Array = [];
			
			private function handleDatasetLoaded(event:Event):void
			{
				// the file extension should be at the end of the file minus the four characters for the extension (i.e. ".csv" )
				var extensionPosition:int = _fileLoader.name.length - 4;
				
				try
				{				
					if(_fileLoader.name.search(".csv") == extensionPosition || _fileLoader.name.search(".CSV") == extensionPosition )
					{
						csvByteArray = _fileLoader.data;
						
						updateCSVDataString(csvByteArray.toString());		
						
						uploadMessage.visible = true;
						
						//clearing the Text Area if any data was pasted before.
						csvTextArea.text="";
						//clearing the Source URL text input
						url.text = "";
					}
				}
				catch(e:Error)
				{
					Alert.show(lang("Error uploading file"),e.message.toString());
				}
				
				
			}
			
			private function showGrid():void
			{
				if (csvDataString == "")
				{
					Alert.show(lang("No data found"));
					return;
				}
				var grid:EditDataGridPanel = PopUpManager.createPopUp(this, EditDataGridPanel) as EditDataGridPanel;
				
				//Listen for save changes in Data Grid Editor
				grid.saveButton.addEventListener(MouseEvent.CLICK, handleSaveButtonClick);
				
				//Every time we load data into the grid we get the data from the csvDataString and not from csvDataArray. 
				//Because if data is modified in the gird it is saved to the csvDataArray irrespective of whether the user clicks the Save button or not.
				//when data is saved in the Grid it is saved to the csvDataString. When the grid is re-opened, csvDataArray is recreated.  
				//csvDataArray acts as the global object for CSVDataSourceEditor and DataGridEditor to modify the csv data.
				var tempArray:Array = WeaveAPI.CSVParser.parseCSV(csvDataString);
				csvDataArray = WeaveAPI.CSVParser.convertRowsToRecords(tempArray);
				
				grid.loadData(csvDataArray, headerArray);
				
				PopUpManager.bringToFront(grid);
			}
			
			private function handleSaveButtonClick(event:MouseEvent):void
			{
				// fix bug that occurs after datagrid validateNow(): it puts in mx_internal_uid values
				for each (var item:Object in csvDataArray)
					delete item['mx_internal_uid'];
				
				var tempArray:Array = WeaveAPI.CSVParser.convertRecordsToRows(csvDataArray);
				csvDataString = WeaveAPI.CSVParser.createCSV(tempArray);
				
				//if the data entered through the text area, update the text area to reflect the changes made.
				if (csvTextArea.text != "")
				{
					csvTextArea.text = csvDataString;
				}
			}
			
			private function handleURLTextChange():void
			{
				uploadMessage.visible = false;
				showGridButton.enabled = false;
				csvDataString = '';
				csvTextArea.text = '';
			}
			
		]]>
	</mx:Script>
</mx:VBox>