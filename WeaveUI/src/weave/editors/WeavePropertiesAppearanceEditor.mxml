<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns="weave.editors.*" 
		 xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns:ui="weave.ui.*" 
		 width="100%" 
		 height="100%"
		 verticalGap="8"
		 creationPolicy="all"
		 creationComplete="handleCreationComplete()"
		 >
	<ui:Indent label="{lang('Window title font:')}" group="{g1}">
		<ui:FontControl id="windowTitleFontControl"/>
	</ui:Indent>
	<ui:Indent label="{lang('Visualization font:')}" group="{g1}">
		<ui:FontControl id="toolFontControl"/>
		<ui:HelpComponent>Only embedded fonts are supported at this time.</ui:HelpComponent>
	</ui:Indent>
	<ui:Indent label="{lang('Background color:')}" group="{g1}">
		<mx:ColorPicker id="swatches" 
						creationComplete="linkBindableProperty(Weave.properties.backgroundColor, event.target, 'selectedColor')"/>
	</ui:Indent>
	<mx:CheckBox label="{lang('Enable dashboard mode')}" toolTip="{lang('Check this box to show all windows in \'dashboard\' mode. Enabling this will hide borders around the tool, hide the bar on the top of the tool, and not allow the tool to be dragged, minimized, maximized, closed, or any other function accessed from the top of the panel.')}"
				 creationComplete="linkBindableProperty(Weave.properties.dashboardMode, event.target, 'selected');"/>
	<mx:CheckBox label="{lang('Show copyright')}"
				 creationComplete="linkBindableProperty(Weave.properties.showCopyright, event.target, 'selected');"/>

	<ui:Indent label="{lang('Window grid snapping:')}">
		<ui:TextInputWithPrompt prompt="pixel or percent" width="100" creationComplete="linkBindableProperty(Weave.properties.windowSnapGridSize, event.target, 'text', 500);"/>
	</ui:Indent>
	<ui:Indent label="{lang('Fixed workspace size:')}">
		<ui:TextInputWithPrompt prompt="width" width="64" creationComplete="linkBindableProperty(Weave.properties.workspaceWidth, event.target, 'text', 500);"/>
		<ui:TextInputWithPrompt prompt="height" width="64" creationComplete="linkBindableProperty(Weave.properties.workspaceHeight, event.target, 'text', 500);"/>
	</ui:Indent>
	<ui:Indent id="hi" label="{lang('Workspace resolution multiplier for exporting screenshots')}" grouped="false">
		<ui:TextInputWithPrompt width="64" creationComplete="linkBindableProperty(Weave.properties.workspaceMultiplier, event.target, 'text', 500);"/>
		<ui:HelpComponent>
			This specifies a multiplier that will increase the resolution of screenshots generated by Weave.  <!--
			-->For example, if you enter a value of 2, the visualization interface will use twice as many pixels as there are visible on the screen in both width and height.  <!--
			-->This feature requires a high-end computer.
		</ui:HelpComponent>
	</ui:Indent>
	
	<!--<mx:CheckBox toolTip="Show or Hide View TabBar"
	id="viewsTabBar"
	label="Show View TabBar"
	creationComplete="linkBindableProperty(Weave.properties.showViewBar,event.target,'selected')"/>
	
	<mx:CheckBox toolTip="Set Active Window Border"
	visible="{isActive}"
	id="toggleActiveBorders"
	label="Show Active Panel Border"
	selected="true"
	creationComplete="handleActiveWindowBorderCheckCreated(event)"/> 
	
	<mx:HBox visible="{isActive}">  
	<mx:Label text="Tool Border:"/> 
	
	<ui:CustomComboBox id="list" dataProvider="{borderList}" maxWidth="96"
	creationComplete="initCell();" labelField="{data.@name}"/>
	
	</mx:HBox>-->
<!--
	<mx:Array id="borderList">
		<mx:Object name="Solid" imageFile="@Embed(source='/weave/resources/images/borderImages/Border1.png')"/>
		<mx:Object name="Dotted" imageFile="@Embed(source='/weave/resources/images/borderImages/Border2.png')"/>
		<mx:Object name="Dash Small" imageFile="@Embed(source='/weave/resources/images/borderImages/Border3.png')"/>
		<mx:Object name="Dash Wide" imageFile="@Embed(source='/weave/resources/images/borderImages/Border4.png')"/>
		<mx:Object name="Dash-Dot-wide" imageFile="@Embed(source='/weave/resources/images/borderImages/Border5.png')"/>
		<mx:Object name="Dash-Dot-small" imageFile="@Embed(source='/weave/resources/images/borderImages/Border6.png')"/>
	</mx:Array>
-->
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			
			import weave.Weave;
			import weave.WeaveProperties;
			import weave.api.linkBindableProperty;
			import weave.ui.IndentGroup;
			import weave.utils.LinkableTextFormat;
			
			
			[Bindable]
			public var selectedColor:uint;
			private const g1:IndentGroup = new IndentGroup();
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				windowTitleFontControl.initialize();
				windowTitleFontControl.fontFamilyCombo.selectedLabel = Weave.properties.panelTitleTextFormat.font.value;
				windowTitleFontControl.fontFamilyCombo.addEventListener(ListEvent.CHANGE, handleFontListChange );

				toolFontControl.initialize();
				toolFontControl.fontFamilyCombo.dataProvider = WeaveProperties.embeddedFonts;
				toolFontControl.fontFamilyCombo.selectedLabel = LinkableTextFormat.defaultTextFormat.font.value;
				toolFontControl.fontFamilyCombo.addEventListener(ListEvent.CHANGE, handleToolFontListChange );
				
				//toolFontControl.removeChild(toolFontControl.boldButton);
				toolFontControl.removeChild(toolFontControl.italicButton);
				toolFontControl.removeChild(toolFontControl.underlineButton);
			}			
			
			private function handleCreationComplete():void
			{
				linkBindableProperty(Weave.properties.panelTitleTextFormat.font, windowTitleFontControl.fontFamilyCombo, "selectedLabel");
				linkBindableProperty(Weave.properties.panelTitleTextFormat.size, windowTitleFontControl.fontSizeCombo, "selectedItem");
				linkBindableProperty(Weave.properties.panelTitleTextFormat.color, windowTitleFontControl.colorPicker, "selectedColor");
				linkBindableProperty(Weave.properties.panelTitleTextFormat.bold, windowTitleFontControl.boldButton, "selected");
				linkBindableProperty(Weave.properties.panelTitleTextFormat.italic, windowTitleFontControl.italicButton, "selected");
				linkBindableProperty(Weave.properties.panelTitleTextFormat.underline, windowTitleFontControl.underlineButton, "selected");
				
				linkBindableProperty(LinkableTextFormat.defaultTextFormat.font, toolFontControl.fontFamilyCombo, "selectedLabel");
				linkBindableProperty(LinkableTextFormat.defaultTextFormat.size, toolFontControl.fontSizeCombo, "selectedItem");
				linkBindableProperty(LinkableTextFormat.defaultTextFormat.color, toolFontControl.colorPicker, "selectedColor");
				linkBindableProperty(LinkableTextFormat.defaultTextFormat.underline, toolFontControl.underlineButton, "selected" );
				linkBindableProperty(LinkableTextFormat.defaultTextFormat.bold, toolFontControl.boldButton, "selected" );
			}
			
			private function handleFontListChange(event:ListEvent):void
			{
				Weave.properties.panelTitleTextFormat.font.value = event.target.selectedLabel;
			}
			
			private function handleToolFontListChange(event:ListEvent):void
			{
				LinkableTextFormat.defaultTextFormat.font.value = event.target.selectedLabel;
			}
			
		]]>
	</mx:Script>
</mx:VBox>	
