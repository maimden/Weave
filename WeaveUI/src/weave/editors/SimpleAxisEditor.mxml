<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns="weave.editors.*"
		 xmlns:ui="weave.ui.*"
		 label=""
		 enabled="{_panel != null}"
		 verticalGap="{verticalGap}"
		 creationPolicy="all" >
	
	<mx:HBox id="titleControls" width="100%">
		<mx:CheckBox id="enableTitle" label="{lang('Visualization title')}" toolTip="{lang('Selecting this option will turn the title of this tool on or off')}"
					 creationComplete="linkBindableProperty(_enableTitle, event.target, 'selected');"/>
		<mx:TextInput id="titleInput"
					  width="100%"
					  toolTip="{lang('Entering a title here will override the automatic title generated by the tool.')}"
					  creationComplete="linkBindableProperty(_panel.panelTitle, event.target, 'text', 500);"/>
	</mx:HBox>
	<mx:HBox width="100%" id="marginProperties" verticalAlign="middle">
		<mx:Label  text="{lang('Margins:')}"/>
		
		<mx:TextInput id="marginLeft" toolTip="{lang('Enter a number of pixels or a percentage to use for the left margin')}" width="50"
						   creationComplete="linkBindableProperty(_visualization.marginLeft, event.target, 'text', 500);"/>
		<mx:VBox>
			<mx:TextInput id="marginTop" toolTip="{lang('Enter a number of pixels or a percentage to use for the top margin')}" width="50"
						  creationComplete="linkBindableProperty(_visualization.marginTop, event.target, 'text', 500);"/>
			<mx:TextInput id="marginBottom" toolTip="{lang('Enter a number of pixels or a percentage to use for the bottom margin')}" width="50"
						  creationComplete="linkBindableProperty(_visualization.marginBottom, event.target, 'text', 500);"/>
		</mx:VBox>
		<mx:TextInput id="marginRight" toolTip="{lang('Enter a number of pixels or a percentage to use for the right margin')}" width="50"
					  creationComplete="linkBindableProperty(_visualization.marginRight, event.target, 'text', 500);"/>
	</mx:HBox>
	<ui:IndentGroup id="g1"/>
	<ui:IndentGroup id="g2"/>
	<ui:IndentGroup id="g3"/>
	<mx:VBox id="axisSettings" verticalGap="{verticalGap}" verticalAlign="middle" width="100%" height="100%">
		<mx:HBox verticalAlign="middle">
			<ui:Indent label="{lang('Axis color:')}" group="{g1}">
				<mx:ColorPicker id="axisColorPicker" toolTip="{lang('Select a color for the axis border of this visualization')}"
								creationComplete="linkBindableProperty(_visualization.axesColor, event.target, 'selectedColor');"/>
			</ui:Indent>
			<ui:Indent label="{lang('Axis thickness:')}" group="{g2}">
				<mx:NumericStepper id="axisThicknessStepper" minimum="0" maximum="50"
								   creationComplete="linkBindableProperty(_visualization.axesThickness, event.target, 'value');"/>
			</ui:Indent>
			<ui:Indent label="{lang('Axis alpha:')}" group="{g3}">
				<mx:NumericStepper id="axisAlphaStepper" minimum="0" maximum="1" stepSize="0.1" toolTip="{lang('0 = transparent; 1 = opaque')}"
							creationComplete="linkBindableProperty(_visualization.axesAlpha, event.target, 'value');"/>
			</ui:Indent>
		</mx:HBox>
		<mx:HBox verticalAlign="middle">
			<ui:Indent label="{lang('Grid color:')}" group="{g1}">
				<mx:ColorPicker id="gridColorPicker" toolTip="{lang('Select a color for the grid lines of this visualization')}"
								creationComplete="linkBindableProperty(_visualization.gridLineColor, event.target, 'selectedColor');"/>
			</ui:Indent>
			<ui:Indent label="{lang('Grid thickness:')}" group="{g2}">
				<mx:NumericStepper id="gridLineThicknessStepper" minimum="1" maximum="10"
								   creationComplete="linkBindableProperty(_visualization.gridLineThickness, event.target, 'value');"/>
			</ui:Indent>
			<ui:Indent label="{lang('Grid alpha:')}" group="{g3}">
				<mx:NumericStepper id="gridLineAlphaStepper" minimum="0" maximum="1" stepSize="0.1" toolTip="{lang('0 = transparent; 1 = opaque')}"
							creationComplete="linkBindableProperty(_visualization.gridLineAlpha, event.target, 'value');"/>
			</ui:Indent>
		</mx:HBox>
		<mx:TabNavigator width="100%" height="100%"
						 paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}" paddingBottom="{padding}">
			<SimpleAxisPlotterLabelEditor label="{lang('X axis labels')}" id="xAxisLabelEditor"/>
			<SimpleAxisPlotterLabelEditor label="{lang('Y axis labels')}" id="yAxisLabelEditor"/>
		</mx:TabNavigator>
	</mx:VBox>

	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import weave.api.linkBindableProperty;
			import weave.core.LinkableBoolean;
			import weave.ui.DraggablePanel;
			import weave.visualization.layers.SimpleInteractiveVisualization;
			
			private const verticalGap:int = 8;
			private const padding:int = 8;

			[Bindable]
			private var _panel:DraggablePanel = null;
			private var _visualization:SimpleInteractiveVisualization = null;
			private var _enableTitle:LinkableBoolean = null;
			
			/**
			 * This function takes three parameters instead of one SimpleVisTool in order to
			 * avoid a chicken-and-egg problem between SimpleAxisEditor and SimpleVisTool.
			 */
			public function setTargets(panel:DraggablePanel, visualization:SimpleInteractiveVisualization, enableTitle:LinkableBoolean):void
			{
				if (_panel)
					throw new Error(lang("targets should not be set more than once"));
				
				_panel = panel;
				_visualization = visualization;
				_enableTitle = enableTitle;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				if (_visualization.getXAxisLayer())
				{
					xAxisLabelEditor.setTarget(_visualization.getXAxisLayer().axisPlotter);
					yAxisLabelEditor.setTarget(_visualization.getYAxisLayer().axisPlotter);
					
					if (!label)
						label = lang("Axes");
				}
				else
				{
					axisSettings.parent.removeChild(axisSettings);
					if (!label)
						label = lang("Margins");
				}
			}
			private function alphaSliderFormatFunction(value:Number):String
			{
				return int((value * 100)) + lang("% Opaque") + "\n" + int(100 - (value * 100)) + lang("% Transparent");
			}
		]]>
	</mx:Script>
</mx:VBox>
