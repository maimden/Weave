<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:userControls="weave.ui.userControls.*"		 
			   layout="absolute"
			   mouseMove="handleMouseMove(event)"
			   mouseDown="handleMouseDown(event)"
			   mouseUp="handleMouseUp(event)">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.primitives.Bounds2D;
			import weave.primitives.ColorRamp;
			import weave.ui.DraggablePanel;
			import weave.ui.DynamicColumnComponent;
			import weave.utils.ColumnUtils;
			import weave.utils.SpatialIndex;
			import weave.visualization.layers.PlotLayer;
			import weave.visualization.plotters.AnchorPlotter;
			import weave.visualization.plotters.AnchorPoint;
			import weave.visualization.plotters.RadVizPlotter;
			
			WeaveAPI.registerImplementation(IVisTool, RadVizTool, "RadViz");
			
			[Bindable]
			private var _plotter:RadVizPlotter ;
			private var _anchorPlotter:AnchorPlotter ;
			private var _anchorLayer:PlotLayer ;
			
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				_plotter = initializePlotters(RadVizPlotter, false);
				getCallbackCollection(_plotter).addGroupedCallback(this, handlePanelTitleChange);
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableFixedAspectRatio.value = true;
				visualization.enableZoomAndPan.value = false;
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [];
				for (var i:int = 0; i < count; i++)
				{
					columnsToInit.push(_plotter.columns.requestObject(null, DynamicColumn, false));
				}
				
				if(columnsToInit.length > 0)
					(initColumnDefaults as Function).apply(null, columnsToInit);
				
				_plotter.setAnchorLocations();
				_anchorLayer = visualization.layers.requestObject("anchorLayer", PlotLayer, true );
				_anchorPlotter = _anchorLayer.getDynamicPlotter().requestLocalObject(AnchorPlotter, true) ;
				linkSessionState(_plotter.anchors,_anchorPlotter.anchors);	
				
				getCallbackCollection(plotLayer.probeFilter).addImmediateCallback(this,drawProbeLines);
				
				visualization.marginTop.value =	visualization.marginBottom.value = "20";
				visualization.marginLeft.value = visualization.marginRight.value = "20";				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				(size as DynamicColumnComponent).dynamicObject = _plotter.radiusColumn ;
				(colorComponent as DynamicColumnComponent).dynamicObject = colorColumn;
				columnList.hashMap = _plotter.columns;
				
				linkBindableProperty(_plotter.enableJitter,jitterckbx,'selected');
				linkBindableProperty(_plotter.radiusConstant,sizeSlider,'value');				
				linkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_plotter.jitterLevel, jitterSlider, "value" );	
				
				plotLayer.rawChildren.addChild(probeSprite);
			}
			
			private var tempBounds:Bounds2D = new Bounds2D();
			private var screenBounds:Bounds2D = new Bounds2D();			
			private var tempPoint:Point = new Point();					
			
			private var _probedKeys:Array ;
			private var _probedAnchor:AnchorPoint;
			private var dataBounds:Bounds2D = new Bounds2D();
			private var isDragging:Boolean = false;			
			private var enableAutoZoom:Boolean;
			
			private var probeSprite:Sprite = new Sprite() ;			
			
			private function drawProbeLines():void
			{ 
				if(!Weave.properties.enableProbeLines.value) return;
				
				var probeKeySet:IKeySet = (plotLayer.probeFilter.internalObject) as IKeySet;
				if(!probeKeySet) return;
				
				visualization.zoomBounds.getDataBounds(dataBounds);
				visualization.zoomBounds.getScreenBounds(screenBounds);
				
				_plotter.probedKeys = probeKeySet.keys ;
				_plotter.drawProbe = (this as DraggablePanel) == DraggablePanel.activePanel;
				
				_plotter.drawProbeLines(dataBounds, screenBounds, probeSprite.graphics);		 		
				
			}
			
			private function handleMouseDown(event:MouseEvent):void
			{
				tempPoint = visualization.globalToLocal(new Point(event.stageX,event.stageY));
				tempBounds.reset();
				tempBounds.setCenter(tempPoint.x, tempPoint.y);
				tempBounds.centeredResize(10,10);
				
				visualization.zoomBounds.getDataBounds(dataBounds);
				visualization.zoomBounds.getScreenBounds(screenBounds);
				screenBounds.projectCoordsTo(tempBounds, dataBounds);
				
				_probedKeys = (_anchorLayer.spatialIndex as SpatialIndex).getKeysBoundingBoxOverlap(tempBounds);
				if( !_probedKeys.length ) return;
				
				var key:IQualifiedKey = _probedKeys[0];
				_probedAnchor = _plotter.anchors.getObject(key.localName) as AnchorPoint;													
				
				visualization.enableSelection.value = false;
				enableAutoZoom = visualization.enableAutoZoomToExtent.value;
				visualization.enableAutoZoomToExtent.value = false;
				isDragging = true;
			}
			
			private function handleMouseUp(event:MouseEvent):void
			{
				if(!isDragging) return;				
				handleMouseMove(event);
				_probedAnchor = null;
				isDragging = false;							
				visualization.enableSelection.value = true;
				visualization.enableAutoZoomToExtent.value = enableAutoZoom;
			}
			
			private function handleMouseMove(event:MouseEvent):void
			{
				if(!isDragging) return;
				if(!_probedAnchor) return ;
				
				tempPoint = visualization.globalToLocal(new Point(event.stageX, event.stageY));
				
				screenBounds.projectPointTo(tempPoint, dataBounds);
				_probedAnchor.x.value = tempPoint.x;
				_probedAnchor.y.value = tempPoint.y;
				
				var theta:Number = _probedAnchor.polarRadians.value;
				_probedAnchor.x.value = Math.cos(theta);
				_probedAnchor.y.value = Math.sin(theta);
			}
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [lang("Size"),lang("Color"),lang("Anchor Dimensions")];
			}
			
			override public function getSelectableAttributes():Array
			{
				return [_plotter.radiusColumn,colorColumn,_plotter.columns];
			}
			
			override protected function get defaultPanelTitle():String
			{
				// try to get unique attribute names separated by commas					
				var newTitle:String = lang("RadViz of ");
				
				var uniqueColumns:Dictionary = new Dictionary();
				
				for each(var column:IAttributeColumn in _plotter.columns.getObjects(IAttributeColumn) )
				{
					uniqueColumns[ColumnUtils.getTitle(column)] = column;
				}
				
				for (var uniqueTitle:String in uniqueColumns)
				{
					newTitle += uniqueTitle + ", ";
				}
				
				if(newTitle.charAt(newTitle.length-1) == ",")
					newTitle = newTitle.substr(0, newTitle.length-2);
				
				return newTitle;
			}
			
			private const colorRampName:LinkableString = newLinkableChild(this, LinkableString,handleColorRampName);
			
			private function handleColorRampName():void
			{
				if (stage == null)
					return callLater(handleColorRampName);
				_plotter.colorMap.value = ColorRamp.getColorRampXMLByName(colorRampName.value);				
			}
			
			private function alphaSliderFormatFunction(item:Number):String 
			{
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Attributes')}">
			<ui:DynamicColumnComponent visTool="{this}" id="colorComponent" label="{lang('Color')}" />
			<ui:DynamicColumnComponent visTool="{this}" id="size" label="{lang('Size')}" />
			<ui:ColumnListComponent visTool="{this}" id="columnList" label="{lang('Anchor Dimensions')}"/>
		</mx:VBox>		
		
		<mx:VBox id="VizControlsPanel" label="{lang('Appearance')}">
			<ui:Indent label="{lang('Point opacity')}"
					   width="100%"
					   toolTip="{lang('Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}">
				<mx:HSlider id="alphaSlider"
							width="100%"
							alpha="1.0"
							snapInterval="0.1"
							tickInterval="0.1" labels="{['10%', '30%', '50%', '70%', '90%', '100%']}"
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="{lang('Point radius')}"
					   width="100%"
					   toolTip="{lang('Use this control to adjust point radius')}">
				<mx:HSlider id="sizeSlider"
							width="100%"
							alpha="1.0"
							tickInterval="1" 
							minimum="1" maximum="10" 
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="{lang('Label angle')}" width="100%">
				<mx:HSlider id="labelAngleSlider" width="100%"
					snapInterval="0.25" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
					dataTipFormatFunction="{function(v:Number):String { return String(Math.round(100*v))+'%' }}"
					creationComplete="linkBindableProperty(_anchorPlotter.labelAngleRatio, event.target, 'value')"/>
			</ui:Indent>
		</mx:VBox>
		
		<mx:VBox id="advancedPanel" label="{lang('Advanced')}">			
			<mx:VBox>
				<mx:HBox
					creationComplete="linkBindableProperty(_plotter.localNormalization,normalizationType,'selectedValue')">
					<mx:Label text="{lang('Normalization method:')}"
							  toolTip="{lang('Select the type of normalization used to calculate record coordinates')}"/>
					<mx:RadioButtonGroup id="normalizationType"/>
					<mx:RadioButton groupName="normalizationType"
									id="localNorm"
									value="true"
									label="{lang('Local')}"
									/>
					<mx:RadioButton groupName="normalizationType"
									id="globalNorm"
									value="false"
									label="{lang('Global')}"
									/>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:HBox>
					<mx:CheckBox id="jitterckbx" label="{lang('Apply Jitter:')}" 
							  toolTip="{lang('Use this control to change record coordinates by a random number')}"/>
					<mx:Button label="{lang('Randomize Jitter')}"
							   toolTip="{lang('Use this control to reseed jitter with new random values')}"
							   click="_plotter.setNewRandomJitterColumn();"/>
					<mx:Label text="{lang('Jitter Level:')}" 
							  enabled="{jitterckbx.selected}"
							  toolTip="{lang('Use slider to adjust the jitter level')}"/>					
					<mx:HSlider id="jitterSlider"
								enabled="{jitterckbx.selected}"
								width="100%"
								alpha="1.0"
								snapInterval="1"
								tickInterval="1"
								labels="{['1','2','3','4','5','6','7','8','9','10']}"
								showDataTip="false"
								minimum="-19" maximum="-10"
								liveDragging="true"/>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:Label text="{lang('Dimensional Anchor Reordering Algorithm:')}"
						  toolTip="{lang('Use this control to reorder the dimensional anchors')}"/>					
				<mx:ComboBox id="algorithmComboBox" dataProvider="{_plotter.algorithms}"
							 creationComplete="linkBindableProperty(_plotter.currentAlgorithm,event.target,'selectedItem')"/>
				<mx:HBox enabled="{algorithmComboBox.selectedIndex == 0}">
					<mx:Label text="{lang('Number of Iterations')}"/>
					<mx:TextInput id="iterationsTextInput" enabled="{algorithmComboBox.selectedIndex == 0}"
								  creationComplete="linkBindableProperty(_plotter.iterations, event.target, 'text')"/>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
