<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
@author kmanohar
<br/>A SimpleVisTool that is linked to the MapTool's layers
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*"
	     xmlns:mapTool="weave.visualization.tools.*"		 
	     >
	<mx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.primitives.IBounds2D;
			import weave.api.ui.IPlotLayer;
			import weave.primitives.Bounds2D;
			import weave.primitives.ZoomBounds;


			override protected function constructor():void
			{
				super.constructor();
				
				panelHeight.value = "25%";
				panelWidth.value = "25%";
				
				panelX.value = "0%";
				panelY.value = "0%";
				minimizable.value = false;
				maximizable.value = false;
				closeable.value = false;
				pinnable.value = false;
				enableBorders.value = false;
				
				clipContent = true;

				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableAutoZoomToExtent.lock();
				visualization.enableSelection.value = false;
				visualization.enableSelection.lock();
				visualization.enableProbe.value = false;
								
				visualization.includeNonSelectableLayersInAutoZoom.value = true;
				getCallbackCollection(visualization.zoomBounds).addGroupedCallback(this,drawBoundsRectangle);
				visualization.enableFixedAspectRatio.value = true;
			
				sessionPanelCoordsAsPercentages = false;	
				
				addEventListener(FlexEvent.CREATION_COMPLETE, function (e:FlexEvent):void
				{
					if(parentTool)
						parentTool.addEventListener(ResizeEvent.RESIZE, handleMapResize);							
					getParentScreenBounds(parentScreenBounds);
					drawBoundsRectangle();
				});
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				canvas.percentHeight= canvas.percentWidth = 100;
				canvas.useHandCursor = true;
				visualization.addChild(canvas);
				canvas.toolTip = lang("Click or drag this rectangle to change the displayed area in the map");
				
				visualization.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);
				visualization.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
				visualization.addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
				
			}
						
			public var parentTool:SimpleVisTool;
			public const parentZoomBounds:ZoomBounds = newLinkableChild(this, ZoomBounds, drawBoundsRectangle, true);
			public const parentScreenBounds:IBounds2D = new Bounds2D();
			
			private var overviewDataBounds:IBounds2D = new Bounds2D();
			private var screenBounds:IBounds2D = new Bounds2D();
			private var tempBounds:IBounds2D = new Bounds2D();
			private const tempShape:Shape = new Shape();
			private var canvas:Canvas = new Canvas();
			
			/**
			 * Updates parentScreenBounds and bounds rectangle when parent tool resizes
			 */
			private function handleMapResize(event:ResizeEvent):void
			{
				drawBoundsRectangle();
				getParentScreenBounds(parentScreenBounds);
			}
			
			/**
			 * This function draws a rectangle around the area currently displayed in the parent MapTool.
			 */
			public function drawBoundsRectangle():void
			{				
				getScreenBounds(screenBounds);
				parentZoomBounds.getDataBounds(tempBounds);	
				
				if( tempBounds.isEmpty()) return;				
				if( screenBounds.isEmpty()) return;									

				if(!parentScreenBounds.isEmpty())
					_fixAspectRatio(tempBounds,parentScreenBounds);
				
				visualization.zoomBounds.getDataBounds(overviewDataBounds);				
				
				overviewDataBounds.projectCoordsTo(tempBounds,screenBounds);
				
				var graphics:Graphics = canvas.graphics;
				graphics.clear();
				
				graphics.lineStyle(2);
				graphics.beginFill(0xcccccc,0.5);
				graphics.drawRect(tempBounds.getXMin(),tempBounds.getYMin(),boundWidth = tempBounds.getWidth(),boundHeight = tempBounds.getHeight());
				graphics.endFill();  								
				
				// TEMPORARY SOLUTION to enforce clipContent (flex bug) so rectangle is not drawn outside the overview panel
				canvas.width = width+1;
				canvas.height = height+1;
			} 
			
			private var tempPoint:Point = new Point();
			private var boundWidth:Number;
			private var boundHeight:Number;
			private var mouseDown:Boolean = false;
			private var enableSelection:Boolean ;
			
			private function handleMouseDown(e:MouseEvent):void 
			{ 
				mouseDown = true;
				handleMouseEvent(e);
			}
			
			private function handleMouseUp(e:MouseEvent):void 
			{ 
				if (!mouseDown)
					return;
				handleMouseEvent(e);
				mouseDown = false;
			}
			
			private function handleMouseMove(e:MouseEvent):void 
			{ 
				if (!mouseDown)
					return;
				handleMouseEvent(e);
			}
						
			private function handleMouseEvent(e:MouseEvent):void
			{
				visualization.zoomBounds.getScreenBounds(screenBounds);				

				tempPoint = visualization.globalToLocal(new Point(e.stageX, e.stageY));
				tempBounds.setBounds(tempPoint.x, tempPoint.y, tempPoint.x+boundWidth,tempPoint.y+boundHeight);
				tempBounds.setCenter(tempPoint.x,tempPoint.y); 
				visualization.zoomBounds.getDataBounds(overviewDataBounds);
				
				screenBounds.projectCoordsTo(tempBounds, overviewDataBounds);
				parentZoomBounds.setBounds(tempBounds,parentScreenBounds, true);
			}
						
			/**
			 * This function was copied from ZoomBounds.as to get the correct dataBounds
			 * @param dataBounds data bounds to correct
			 * @param _screenBounds corresponding screenBounds
			 */
			private function _fixAspectRatio(dataBounds:IBounds2D,_screenBounds:IBounds2D):void
			{
				var xScale:Number = dataBounds.getWidth() / _screenBounds.getXCoverage();
				var yScale:Number = dataBounds.getHeight() / _screenBounds.getYCoverage();
				if (xScale != yScale)
				{
					var scale:Number = Math.sqrt(Math.abs(xScale * yScale));
					dataBounds.centeredResize(_screenBounds.getXCoverage() * scale, _screenBounds.getYCoverage() * scale);
				}
			}
			
			/**
			 * Gets the screenBounds of the parentTool
			 * @param outputScreenBounds A bounds to store the result in.
			 */
			private function getParentScreenBounds(outputScreenBounds:IBounds2D):void
			{
				if(!parentTool) return;				
				for each(var layer:IPlotLayer in parentTool.visualization.layers.getObjects(IPlotLayer))
				{
					layer.getScreenBounds(outputScreenBounds);
					outputScreenBounds.includeBounds(outputScreenBounds);
				}
			}
			
			/**
			 * Gets the screenBounds
			 * @param outputScreenBounds A bounds to store the result in.
			 */
			private function getScreenBounds(outputScreenBounds:IBounds2D):void
			{
				for each(var layer:IPlotLayer in visualization.layers.getObjects(IPlotLayer))
				{
					layer.getScreenBounds(outputScreenBounds);
					outputScreenBounds.includeBounds(outputScreenBounds);
				}
			}
		]]>
	</mx:Script>


</SimpleVisTool>
