<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableDynamicObject;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.BarChartLegendPlotter;
			import weave.visualization.plotters.ColorBinLegendPlotter;
			
			[Bindable] private var _barLegendPlotter:BarChartLegendPlotter;
			private var _barLegendLayerName:String;
			private const _colorLegendLayerName:String = "color legend";
			private var _colorLegendLayer:SelectablePlotLayer;
			private var _colorLegendPlotter:ColorBinLegendPlotter;
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				
				// create bar segment legend
				_barLegendPlotter = initializePlotters(BarChartLegendPlotter, false);
				_barLegendLayerName = visualization.layers.getName(plotLayer);
				
				// create global color ramp legend
				_colorLegendLayer = visualization.layers.requestObject(_colorLegendLayerName, SelectablePlotLayer, true);
				_colorLegendPlotter = _colorLegendLayer.getDynamicPlotter().requestLocalObject(ColorBinLegendPlotter, true);
				_colorLegendLayer.useTextBitmapFilters.value = true;
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.topMarginColumn = _colorLegendPlotter.dynamicColorColumn;
				visualization.topMarginClickCallbacks.addImmediateCallback(this, handleMarginLabelClick);
				_colorLegendPlotter.dynamicColorColumn.addGroupedCallback(this, updateMarginLabel, true);

				panelWidth.value = "20%";
				panelHeight.value = "50%";

				visualization.marginBottom.value = "5";
				visualization.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.marginLeft.value   = "5";
				visualization.marginRight.value  = "5";
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				visualization.marginTopNumber.addGroupedCallback(this, handleMarginChange);
				linkBindableProperty(visualization.marginTopNumber, marginLabel, "height");
				linkBindableProperty(_barLegendPlotter.maxColumns, legendControls.numColumns, 'value');
				linkBindableProperty(_colorLegendPlotter.maxColumns, legendControls.numColumns, 'value');
				linkBindableProperty(_barLegendPlotter.ascendingOrder, legendControls.ascendingOrderCheck, 'selected');
				linkBindableProperty(_colorLegendPlotter.ascendingOrder, legendControls.ascendingOrderCheck, 'selected');
				linkBindableProperty(_barLegendPlotter.itemLabelFunction, legendControls.txtLegendValuesFunction, 'text', 500);
				linkBindableProperty(_colorLegendPlotter.itemLabelFunction, legendControls.txtLegendValuesFunction, 'text', 500);
				linkBindableProperty(_barLegendPlotter.legendTitleFunction, legendControls.txtLegendAttrNameFunc, 'text', 500);
				linkBindableProperty(_colorLegendPlotter.legendTitleFunction, legendControls.txtLegendAttrNameFunc, 'text', 500);
				legendControls.chkShowLegendAttrName.addEventListener(Event.CHANGE, toggleShowAttributeName);
				
				_barLegendPlotter.legendTitleFunction.addGroupedCallback(this, updateMarginLabel, true);
				//_colorLegendPlotter.legendTitleFunction.addGroupedCallback(this, updateMarginLabel, true);
			}
			
			public const dynamicBarChartTool:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(CompoundBarChartTool), handleBarChartChange, true);
			
			private function get barChart():CompoundBarChartTool
			{
				return dynamicBarChartTool.internalObject as CompoundBarChartTool;
			}
			
			private function handleBarChartChange():void
			{
				// update the legend properties to reflect the new bar chart properties.
				
				if (barChart != null)
				{
					copySessionState(barChart.chartColors, _barLegendPlotter.chartColors);
					copySessionState(barChart.heightColumns, _barLegendPlotter.columns);
				}
				
				if (_barLegendPlotter.columns.getObjects().length == 1 || barChart == null)
				{
					// show global color ramp legend
					_colorLegendLayer.layerIsVisible.value = true;
					plotLayer.layerIsVisible.value = false;
				}
				else
				{
					// show bar segment legend
					_colorLegendLayer.layerIsVisible.value = false;
					plotLayer.layerIsVisible.value = true;
				}
				
				updateMarginLabel();
			}
			
			private function handleMarginLabelClick():void
			{
				if (_barLegendPlotter.columns.getObjects().length == 1 || barChart == null)
					AttributeSelectorPanel.openDefaultSelector(_colorLegendPlotter.dynamicColorColumn);
				else
					AttributeSelectorPanel.openDefaultSelector(barChart.heightColumns);
			}
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				if (_barLegendPlotter.columns.getObjects().length <= 1 || barChart == null)
				{
					visualization.topMarginToolTip = null;
					var colTitle:String = ColumnUtils.getTitle(_colorLegendPlotter.dynamicColorColumn);
					try
					{
						marginLabel.text = _barLegendPlotter.legendTitleFunction.apply(null, [colTitle]);
					}
					catch (e:Error)
					{
						marginLabel.text = colTitle;
					}
					visualization.additionalProbeColumns = WeaveAPI.SessionManager.getLinkableDescendants(_colorLegendPlotter.dynamicColorColumn, ReferencedColumn);
				}
				else
				{
					visualization.topMarginToolTip = lang("Click to select the attribute(s) used for the bars.");
					try
					{
						var newTitle:String = _barLegendPlotter.legendTitleFunction.apply();
						marginLabel.text = newTitle ? newTitle : lang("Bar Segment Colors");						
					}
					catch (e:Error)
					{
						marginLabel.text = lang("Bar Segment Colors");
					}
					visualization.additionalProbeColumns = null;
				}
				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}
			
			override protected function get defaultPanelTitle():String
			{
				return lang("Bar Chart Legend");
			}
			
			private static const DEFAULT_MARGIN_TOP:int = 25;
			private var _prevMarginTop:String = String(DEFAULT_MARGIN_TOP); // this stores the previous nonzero top margin setting
			private function handleMarginChange():void
			{
				if (visualization.marginTopNumber.value != 0)
				{
					_prevMarginTop = visualization.marginTop.value;
					legendControls.chkShowLegendAttrName.selected = true;
				}
				else
				{
					legendControls.chkShowLegendAttrName.selected = false;
				}
			}
			private function toggleShowAttributeName(e:Event):void
			{
				visualization.marginTop.value = legendControls.chkShowLegendAttrName.selected ? _prevMarginTop : '0';
			}
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
			visible="{marginLabel.height > 0}"
			mouseChildren="false" mouseEnabled="false"
			fontWeight="bold" 
			x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5" width="100%"
			horizontalScrollPolicy="off" verticalScrollPolicy="off"
			wordWrap="true" selectable="false" editable="false"
			borderThickness="0" backgroundAlpha="0"/>
	
	<ui:ControlPanel>
		<ui:LegendControls id="legendControls"/>
	</ui:ControlPanel>
</SimpleVisTool>
