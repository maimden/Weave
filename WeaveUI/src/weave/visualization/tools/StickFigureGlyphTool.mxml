<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.StickFigureGlyphPlotter;
			
			public var _plotter:StickFigureGlyphPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(StickFigureGlyphPlotter, true);

				initColumnDefaults(
						_plotter.dataX,
						_plotter.dataY,
						_plotter.theta1,
						_plotter.theta2,
						_plotter.theta3,
						_plotter.theta4
					);
				
				_plotter.dataX.addImmediateCallback(this,updateProbeColumns);
				_plotter.dataY.addImmediateCallback(this,updateProbeColumns);
				_plotter.theta1.addImmediateCallback(this,updateProbeColumns);
				_plotter.theta2.addImmediateCallback(this,updateProbeColumns);
				_plotter.theta3.addImmediateCallback(this,updateProbeColumns);
				_plotter.theta4.addImmediateCallback(this,updateProbeColumns);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["X","Y","Theta 1","Theta 2","Theta 3","Theta 4"];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.dataX,_plotter.dataY,_plotter.theta1,_plotter.theta2,_plotter.theta3,_plotter.theta4];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if(includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [];
					if(_plotter.dataX.getInternalColumn()) visualization.additionalProbeColumns.push(_plotter.dataX.getInternalColumn());
					if(_plotter.dataY.getInternalColumn()) visualization.additionalProbeColumns.push(_plotter.dataY.getInternalColumn());
					if(_plotter.theta1.getInternalColumn()) visualization.additionalProbeColumns.push(_plotter.theta1.getInternalColumn());
					if(_plotter.theta2.getInternalColumn()) visualization.additionalProbeColumns.push(_plotter.theta2.getInternalColumn());
					if(_plotter.theta3.getInternalColumn()) visualization.additionalProbeColumns.push(_plotter.theta3.getInternalColumn());
					if(_plotter.theta4.getInternalColumn()) visualization.additionalProbeColumns.push(_plotter.theta4.getInternalColumn());
					if(visualization.additionalProbeColumns.length == 0) visualization.additionalProbeColumns = null ;
				}
				else visualization.additionalProbeColumns = null;
				//else ProbeTextUtils.probedColumns.copyObject('probedColumns',oldProbeColumns);
			}
			
			override protected function get defaultPanelTitle():String
			{
				return lang("Stick Figure Plot of ") + ColumnUtils.getTitle(_plotter.dataX)
					+ lang(" -vs- ") + ColumnUtils.getTitle(_plotter.dataY)
					+ lang(", with angles of ") + ColumnUtils.getTitle(_plotter.theta1) 
					+ ", " + ColumnUtils.getTitle(_plotter.theta2) 
					+ ", " + ColumnUtils.getTitle(_plotter.theta3) 
					+ ", " + ColumnUtils.getTitle(_plotter.theta4);
			}

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty( _plotter.curvature,  curvatureSlider, "value");
				linkBindableProperty( _plotter.lineStyle.weight.defaultValue,  thicknessSlider, "value");
			}
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + lang("% Opaque") + "\n" + int(100 - (item * 100)) + lang("% Transparent");
			}
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
			<mx:Panel id="VizControlsPanel" 
					  label="{lang('Visualization Controls')}" 
					  headerHeight="2"
					  borderColor="0x000000" 
					  backgroundColor="0xCCCCCC" 
					  backgroundAlpha="0.0" 
					  borderThickness="0.0" 
					  height="100%" 
					  width="100%" 
					  borderAlpha="0.2" 
					  borderStyle="none">
				<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
							 toolTip="{lang('Checking this box makes the x, y, color and size attributes visible in this tool\'s probe tooltip')}"
							 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
				<ui:DynamicColumnComponent visTool="{this}" label="data X" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.dataX"/>
				<ui:DynamicColumnComponent visTool="{this}" label="data y" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.dataY"/>
				<ui:DynamicColumnComponent visTool="{this}" label="theta1" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.theta1"/>
				<ui:DynamicColumnComponent visTool="{this}" label="theta2" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.theta2"/>
				<ui:DynamicColumnComponent visTool="{this}" label="theta3" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.theta3"/>
				<ui:DynamicColumnComponent visTool="{this}" label="theta4" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.theta4"/>
				
				
				<mx:VBox width="100%" 
						 verticalGap="0">
					<mx:VBox width="100%" 
							 id="cntrols">
						<mx:HBox width="100%" 
								 borderStyle="inset" 
								 backgroundColor="0xFFFFFF" 
								 backgroundAlpha="0.7">
							<mx:Label text="{lang('Line Curvature:')}" 
									  color="0x000000" fontSize="12" 
									  toolTip=""/>
							
							<mx:HSlider id="curvatureSlider" 
										width="100%" 
										minimum="-1" maximum="1" value="0"  snapInterval="0.1" tickInterval="0.1"
										liveDragging="true"/>
						</mx:HBox>
						<mx:HBox width="100%" 
								 borderStyle="inset" 
								 backgroundColor="0xFFFFFF" 
								 backgroundAlpha="0.7">
							<mx:Label text="{lang('Line Thickness:')}" 
									  color="0x000000" fontSize="12" 
									  toolTip=""/>
							
							<mx:HSlider id="thicknessSlider" 
										width="100%" 
										minimum="1" maximum="4" value="1"  snapInterval="1" tickInterval="1"
										liveDragging="true"/>
						</mx:HBox>
					</mx:VBox>
				</mx:VBox>
			</mx:Panel>
	</ui:ControlPanel>
</SimpleVisTool>
