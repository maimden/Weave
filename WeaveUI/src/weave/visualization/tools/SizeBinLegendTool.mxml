<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableDynamicObject;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.CustomCursorManager;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.ColorBinLegendPlotter;
			import weave.visualization.plotters.SizeBinLegendPlotter;
			
			private var _sizeBinLegendPlotter:SizeBinLegendPlotter;
			private var _sizeBinLegendLayerName:String;
			private const _colorLegendLayerName:String = "color legend";
			private var _colorLegendLayer:SelectablePlotLayer;
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				
				// create size bin legend
				_sizeBinLegendPlotter = initializePlotters(SizeBinLegendPlotter, false);
				_sizeBinLegendLayerName = visualization.layers.getName(plotLayer);
				plotLayer.useTextBitmapFilters.value = true;
				
				// create global color ramp legend
				_colorLegendLayer = visualization.layers.requestObject(_colorLegendLayerName, SelectablePlotLayer, true);
				_colorLegendLayer.getDynamicPlotter().requestLocalObject(ColorBinLegendPlotter, true);
				_colorLegendLayer.useTextBitmapFilters.value = true;
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.marginBottom.value = "5";
				visualization.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.marginLeft.value   = "5";
				visualization.marginRight.value  = "5";

				visualization.topMarginClickCallbacks.addImmediateCallback(this, handleMarginLabelClick);
				colorColumn.addImmediateCallback(this, updateMarginLabel, true);
				
				panelWidth.value = "20%";
				panelHeight.value = "50%";

				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				visualization.marginTopNumber.addGroupedCallback(this, handleMarginChange);
				linkBindableProperty(visualization.marginTopNumber, marginLabel, "height");
			}
			private static const DEFAULT_MARGIN_TOP:int = 25;
			private function handleMarginChange():void
			{
				marginLabelCheckBox.selected = visualization.marginTopNumber.value != 0;
			}
			
			public const dynamicScatterPlotTool:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(ScatterPlotTool), handleScatterPlotChange, true);
			private function get scatterPlot():ScatterPlotTool
			{
				return dynamicScatterPlotTool.internalObject as ScatterPlotTool;
			}
			
			private function handleScatterPlotChange():void
			{
				// update the legend properties to reflect the new ScatterPlot properties.
				
				if (scatterPlot != null)
				{
					copySessionState(scatterPlot.plotter.radiusColumn, _sizeBinLegendPlotter.radiusColumn);
					copySessionState(scatterPlot.plotter.minScreenRadius, _sizeBinLegendPlotter.minScreenRadius);
					copySessionState(scatterPlot.plotter.maxScreenRadius, _sizeBinLegendPlotter.maxScreenRadius);
				}
				
				if (scatterPlot && scatterPlot.plotter.enabledSizeBy.value)
				{
					// show size bin legend
					_colorLegendLayer.layerIsVisible.value = false;
					plotLayer.layerIsVisible.value = true;
				}
				else
				{
					// show global color ramp legend
					_colorLegendLayer.layerIsVisible.value = true;
					plotLayer.layerIsVisible.value = false;
				}
				
				updateMarginLabel();
			}
			
			private function handleMarginLabelClick():void
			{
				if (_sizeBinLegendPlotter.radiusColumn.keys.length == 0 || scatterPlot == null)
					AttributeSelectorPanel.openDefaultSelector(colorColumn);
				else
					AttributeSelectorPanel.openDefaultSelector(scatterPlot.plotter.radiusColumn);
			}
			
			[Bindable] private var marginLabelText:String = "";
			[Bindable] private var marginLabelMode:String = "";
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				if (_sizeBinLegendPlotter.radiusColumn.keys.length == 0 || scatterPlot == null)
				{
					marginLabelText = ColumnUtils.getTitle(colorColumn);
					marginLabelMode = "color";
				}
				else
				{
					marginLabelText = ColumnUtils.getTitle(_sizeBinLegendPlotter.radiusColumn);
					marginLabelMode = "size";
				}

				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}
			
			private function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
				 visible="{marginLabel.height > 0}"
				 fontWeight="bold" click="handleMarginLabelClick()" 
				 x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5"
				 text="{marginLabelText}" width="100%"
				 mouseOver="CustomCursorManager.showCursor(CustomCursorManager.LINK_CURSOR)"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off"
				 mouseOut="CustomCursorManager.removeCurrentCursor()"
				 wordWrap="true" selectable="false" editable="false"
				 borderThickness="0" backgroundAlpha="0"
				 toolTip="{marginLabelText} &#13;&#09;Click here to select the attribute used for {marginLabelMode}."/>

	<ui:ControlPanel>
			<mx:Panel id="attributesPanel" 
					  label="{lang('Display Preferences')}"
					  headerHeight="2"
					  borderColor="0x000000" 
					  backgroundColor="0xCCCCCC" 
					  backgroundAlpha="0.0" 
					  borderThickness="0.0" 
					  height="100%" 
					  width="100%" 
					  borderAlpha="0.2" 
					  borderStyle="none">
				<mx:CheckBox id="marginLabelCheckBox" label="{lang('Show legend attribute name')}" change="visualization.marginTopNumber.value = marginLabelCheckBox.selected ? DEFAULT_MARGIN_TOP : 0;" toolTip="{lang('Click to hide the title of the Legend.')}"/>
			</mx:Panel>
	</ui:ControlPanel>
</SimpleVisTool>
