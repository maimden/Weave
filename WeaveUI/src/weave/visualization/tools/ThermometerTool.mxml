<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" xmlns:tools="weave.visualization.tools.*" 
	     layout="absolute"
		 xmlns:settings="weave.ui.settings.*" xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.ui.IVisTool;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.ThermometerPlotter;
		
			WeaveAPI.registerImplementation(IVisTool, ThermometerTool, "Thermometer Tool");
			
			public var _plotter:ThermometerPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(ThermometerPlotter, true);
				visualization.getXAxisLayer().layerIsVisible.value = false;
				
				// by default this tool only displays the probed records.
				plotLayer.subsetFilter.globalName = Weave.DEFAULT_PROBE_KEYSET;
				plotLayer.selectionFilter.removeObject();
				plotLayer.probeFilter.removeObject();

				//BEGIN TEMPORARY SOLUTION
				visualization.marginLeftNumber.addImmediateCallback(this, updateAxisLabels);
				visualization.marginBottomNumber.addImmediateCallback(this, updateAxisLabels);
				getCallbackCollection(_plotter).addImmediateCallback(this, updateAxisLabels, true);
				// END TEMPORARY SOLUTION
				
				visualization.marginBottom.value = "80";
				visualization.marginTop.value    = "30";
				visualization.marginLeft.value   = "80";
				visualization.marginRight.value  = "10";
				
				yAxisLayer.axisPlotter.axisLabelRelativeAngle.value = 90;
				var self:* = this;
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, _plotter.meterColumn); })

				getCallbackCollection(visualization.zoomBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				initColumnDefaults(_plotter.meterColumn);
				
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [lang("Meter")];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.meterColumn];
			}
			
			private function invalidateAxes():void
			{
				handlePanelTitleChange();
			}
			
			override protected function get defaultPanelTitle():String
			{
				return lang("Thermometer of ") + ColumnUtils.getTitle(_plotter.meterColumn);
			}
			
			private function updateAxisLabels():void
			{
				if (_plotter == null)
					title = lang("Thermometer");
/*				else
					title = "Thermometer of " + _plotter.meterColumn.title;
	*/			
				yAxisLayer.axisPlotter.setSideAxisName(ColumnUtils.getTitle(_plotter.meterColumn), 
																-90, 
																-visualization.marginLeftNumber.value, 0, 
																BitmapText.VERTICAL_ALIGN_TOP);
			}

		]]>
	</mx:Script>
	<ui:ControlPanel>
			<mx:Panel id="attributesPanel" 
					  label="{lang('Attributes for Thermometer')}" 
					  headerHeight="2"
					  borderColor="0x000000" 
					  backgroundColor="0xCCCCCC" 
					  backgroundAlpha="0.0" 
					  borderThickness="0.0" 
					  height="100%" 
					  width="100%" 
					  borderAlpha="0.2" 
					  borderStyle="none">
				<ui:DynamicColumnComponent visTool="{this}" label="{lang('Meter column:')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.meterColumn"/>
				
			</mx:Panel>
	</ui:ControlPanel>
</SimpleVisTool>
