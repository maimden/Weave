<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.
    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*">
	<mx:Script>
		<![CDATA[
			import weave.utils.ColumnUtils;
			import weave.api.linkBindableProperty;
			import mx.events.FlexEvent;
			
			import weave.Weave;
			import weave.core.LinkableBoolean;
			import weave.api.getCallbackCollection;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.AxisPlotter;
			import weave.visualization.plotters.BarChartPlotter;

			
			/**remove Y axis, use legend instead**/
			
			private var _plotter:BarChartPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(BarChartPlotter, true);
				
				visualization.marginBottom.value = "50";
				visualization.marginTop.value    = "10";
				visualization.marginLeft.value   = "80";
				visualization.marginRight.value  = "10";
				visualization.enableZoomAndPan.value = false;
				
				//BEGIN TEMPORARY SOLUTION
				visualization.marginLeftNumber.addImmediateCallback(this, updateAxisLabels);
				visualization.marginBottomNumber.addImmediateCallback(this, updateAxisLabels);
				getCallbackCollection(_plotter).addImmediateCallback(this, updateAxisLabels, true);
				// END TEMPORARY SOLUTION
				var self:* = this;
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, _plotter.sortColumn); })
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.openToolSelector(self, _plotter.yBarEnd); })

				initColumnDefaults(
						_plotter.yBarEnd,
						_plotter.sortColumn,
						colorColumn
					);
			}

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_plotter.linkSortToHeight,linkSortingToHeightCheck, "selected");
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [ lang("Height"), lang("Sort"), lang("Color")];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.yBarEnd, _plotter.sortColumn, colorColumn];
			}
			
			private function updateAxisLabels():void
			{
				if (!panelTitle.value)
					title = lang("Bar Chart of ") + ColumnUtils.getTitle(_plotter.yBarEnd) + lang(" sorted by ") + ColumnUtils.getTitle(_plotter.sortColumn);
				xAxisLayer.axisPlotter.setSideAxisName(lang("Sorted by: ")+ColumnUtils.getTitle(_plotter.sortColumn), 0, 0, visualization.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisLayer.axisPlotter.setSideAxisName(ColumnUtils.getTitle(_plotter.yBarEnd), -90, -visualization.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
			
			private function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			private function alphaSliderFormatFunction(item:Number):String {
            	//return int(100 - (item * 100)) + "% Transparent";
            	return int((item * 100)) + lang("% Opaque") + "\n" + int(100 - (item * 100)) + lang("% Transparent");
            }
			
		]]>
	</mx:Script>
	<!--<ui:ConnectionComponent/>-->

	<ui:ControlPanel>
			<mx:Panel id="VizControlsPanel" 
					label="{lang('Visualization Controls')}" 
					headerHeight="2"
					borderColor="0x000000" 
					backgroundColor="0xCCCCCC" 
					backgroundAlpha="0.0" 
					borderThickness="0.0" 
					height="100%" 
					width="100%" 
					borderAlpha="0.2" 
					borderStyle="none">
				<mx:VBox width="100%" 
						verticalGap="0">
					<mx:VBox width="100%" 
							id="barChartControls">
						<mx:HBox borderStyle="inset" width="100%">
							<mx:Label text="{lang('Bar Opacity:')}" 
									color="0x000000" fontSize="12" 
									toolTip="{lang('Use this control to see how transparent bars are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}"/>
						
							<mx:HSlider id="alphaSlider" 
										width="100%" 
										alpha="1.0"
										dataTipFormatFunction="alphaSliderFormatFunction"
										minimum="0.3" maximum="1.0" value="1.0"
										liveDragging="true"/>
						</mx:HBox>
						<mx:CheckBox id="linkSortingToHeightCheck" fontSize="12" label="{lang('Sort')}"
									 toolTip="{lang('Link the column used for sorting the bar order to the column used to set the height of the bars.  Checking this will make it so that if you change the bar height attribute, the bars will be sorted to match this column.  Unchecking this unlink these columns so the sorting can be set separately, but will still be sorted by the previous height column until set otherwise.')}"/>
						<ui:DynamicColumnComponent visTool="{this}" label="{lang('height')}" creationComplete="event.target.dynamicObject = _plotter.yBarEnd"/>
						<ui:DynamicColumnComponent visTool="{this}" label="{lang('sort')}" creationComplete="event.target.dynamicObject = _plotter.sortColumn"/>
						<ui:DynamicColumnComponent visTool="{this}" label="{lang('color')}" creationComplete="event.target.dynamicObject = colorColumn"/>
						
						<!--<mx:HBox width="100%" 
								borderStyle="inset" 
								backgroundColor="0xFFFFFF" 
								backgroundAlpha="0.7">
								<mx:CheckBox id="sortAscendingCheck" fontSize="12" label="Sort Ascending"
											 toolTip="Sort the bars by height in ascending order.  Unchecking this means sorting in descending order."/>
						</mx:HBox>-->
						
						<!--<mx:VBox borderStyle="inset"
								backgroundColor="0xFFFFFF" 
								backgroundAlpha="0.7"
								width="100%">
							
						</mx:VBox>-->
					</mx:VBox>
				</mx:VBox>
	
		
			</mx:Panel>
	</ui:ControlPanel>
</SimpleVisTool>
