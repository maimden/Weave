<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="312" height="300" 
				title="{lang('Saved Selections')}"
				layout="vertical">

	
	<LinkableObjectList id="savedSelectionsList"
						width="100%" height="100%"
						hashMap="{_hashMap}" 
						labelFunction="selectionsListLabelFunction"
						allowMultipleSelection="false">
		
	</LinkableObjectList>
	
	<mx:HBox>
		<mx:Button label="{lang('Delete')}" 
				   enabled="{savedSelectionsList.selectedIndex >= 0}" 
				   click="deleteSelection()"/>
		<mx:Button label="{lang('Rename')}" 
				   enabled="{savedSelectionsList.selectedIndex >= 0}" 
				   click="renameSelection()"/>
	</mx:HBox>
	<mx:ControlBar height="33" paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="3">
		<mx:Spacer width="100%"/>
		<mx:Button label="{lang('close')}" click="PopUpManager.removePopUp(_popupManager);" fillAlphas="[1,1]"/>
	</mx:ControlBar>
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.core.LinkableHashMap;
			import weave.data.KeySets.KeySet;
			import weave.ui.controlBars.WeaveMenuBar;
			import weave.ui.controlBars.WeaveMenuItem;
			
			private static const _hashMap:LinkableHashMap = Weave.savedSelectionKeySets;
			private static const _globalSelection:KeySet = Weave.defaultSelectionKeySet;
			
			private static var _popupManager:SelectionManager = null;
			
			/**
			 * Function used solely to get the label for each item in the list
			 **/
			private static function selectionsListLabelFunction(item:Object):String
			{
				// The label will be the name of the item followed by the record count
				var label:String = _hashMap.getName(item as KeySet);
				return label + " (" + (item as KeySet).keys.length + "{lang(' records')}" + ")";
			}
			
			/**
			 * Create the menu items used for the WeaveMenuItem associated with this class
			 **/
			public static function setupMenu(parentMenu:WeaveMenuBar, destinationMenu:WeaveMenuItem):void
			{
				if(!destinationMenu)
					return;
				
				if(destinationMenu.children)
					destinationMenu.children.removeAll();
				
				var menuItem:WeaveMenuItem;
				var clickFunction:Function;
				var selectionActive:Function = function():Boolean
				{
					return _globalSelection.keys.length > 0;
				}
				
				// menu item to save the current selection
				if (Weave.properties.enableSaveCurrentSelection.value)
				{
					menuItem = new WeaveMenuItem(lang("Save current selection..."), saveSelection, null, selectionActive);
					parentMenu.addMenuItemToMenu(destinationMenu, menuItem);
				}
				
				// meny item to clear the current selection
				if (Weave.properties.enableClearCurrentSelection.value)
				{
					clickFunction = _globalSelection.clearKeys;
					menuItem = new WeaveMenuItem(lang("Clear current selection"), clickFunction, null, selectionActive);
					parentMenu.addMenuItemToMenu(destinationMenu, menuItem);
				}
				
				parentMenu.addSeparatorToMenu(destinationMenu);
				
				// menu item to manage saved selections
				if (Weave.properties.enableManageSavedSelections.value)
				{
					clickFunction = function():void {
						// create the SelectionManager as a modal PopUp
						_popupManager = PopUpManager.createPopUp(WeaveAPI.topLevelApplication as DisplayObject, SelectionManager, true) as SelectionManager;
						// this will disable dragging of this popup
						_popupManager.isPopUp = false;
						PopUpManager.centerPopUp(_popupManager);
					};
					var enableFunction:Function = function():Boolean
					{
						return _hashMap.getNames().length > 0;
					};
					menuItem = new WeaveMenuItem(lang("Manage saved selections..."), clickFunction, null, enableFunction);
					parentMenu.addMenuItemToMenu(destinationMenu, menuItem);
				}

				if(Weave.properties.enableSelectionSelectorBox.value)
				{
					clickFunction = function():void
					{
						Weave.root.requestObject("SelectionSelector", SelectionSelector, false);
					};
					menuItem = new WeaveMenuItem(lang("Selection Selector Tool"), clickFunction);
					parentMenu.addMenuItemToMenu(destinationMenu, menuItem);
				}
				
				var selections:Array = _hashMap.getObjects();
				if (selections.length > 0)
					parentMenu.addSeparatorToMenu(destinationMenu);
				
				// for each saved selection
				for (var i:int = 0; i < selections.length; i++)
				{
					var label:String = selectionsListLabelFunction(selections[i]);
					menuItem = new WeaveMenuItem(label, copySessionState, [selections[i], _globalSelection]);
					parentMenu.addMenuItemToMenu(destinationMenu, menuItem);
				}
			}
			
			override protected function constructor():void
			{
				super.constructor();
				
				// Disable certain features on this manager so that it is purely modal and has to be closed manually
				// before doing anything else
				minimizable.value = false;
				enableMoveResize.value = false;
				maximizable.value = false;
				closeable.value = false;
			}
			
			/**
			 * Delete the selection the user picked in the list of saved selections
			 */
			private function deleteSelection():void
			{
				_hashMap.removeObject(_hashMap.getName(savedSelectionsList.selectedItem as KeySet));
			}
			
			/**
			 * Rename the selection the user picked in the list of saved selections
			 */
			private function renameSelection():void
			{
				// create a text-input alert box for the user to enter the new name for the selection
				var alertBox:AlertTextBox = AlertTextBox.show(lang("Selection Name"), lang("Please enter a name for the selection: "));
				
				alertBox.addEventListener(AlertTextBoxEvent.BUTTON_CLICKED, function (e:AlertTextBoxEvent):void {
					// if the user clicked cancel, do nothing
					if( !e.confirm )
						return;
					
					var oldSubset:KeySet = savedSelectionsList.selectedItem as KeySet;
					var oldName:String = _hashMap.getName(oldSubset);
					var newName:String = e.textInput;

					// we want to put the new subset in the same position the old subset was
					var nameOrder:Array = _hashMap.getNames();
					nameOrder[nameOrder.indexOf(oldName)] = newName;
					
					_hashMap.requestObjectCopy(newName, oldSubset);
					_hashMap.removeObject(oldName);
					_hashMap.setNameOrder(nameOrder);

					// invalidate the list so we see it update
					savedSelectionsList.invalidateList();
				});
			}
			
			/**
			 * Save the current selection
			 */
			public static function saveSelection():void
			{
				// create a text-input alert box for the user to enter the new name for the selection
				var alertBox:AlertTextBox = AlertTextBox.show(lang("Selection Name"), lang("Please enter a name for the selection: "));
				
				alertBox.addEventListener(AlertTextBoxEvent.BUTTON_CLICKED, function (e:AlertTextBoxEvent):void {
					// if the user clicked cancel, do nothing
					if( !e.confirm )
						return;
					var name:String = e.textInput;
					_hashMap.requestObjectCopy(name, _globalSelection);
					var _selectionSelector:SelectionSelector = Weave.root.getObject("SelectionSelector") as SelectionSelector;
					if( _selectionSelector )
						_selectionSelector.selectItem(name);
				});
			}
		]]>
	</mx:Script>
</DraggablePanel>