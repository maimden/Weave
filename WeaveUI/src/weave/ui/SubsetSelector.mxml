<?xml version="1.0" encoding="utf-8"?>
<!--
/*
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
					 title="{lang('Saved Subsets')}"
					 width="25%" height="10%"
					 layout="vertical" xmlns:tools="weave.visualization.tools.*" xmlns:editors="weave.editors.*">
	<CustomComboBox id="subsetSelectorBox" prompt="{lang('Select a subset...')}"
				 width="100%" height="100%"
				 labelFunction="subsetsListLabelFunction"
				 valueCommit="itemSelected()"
				 />
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.data.KeySets.KeyFilter;
			
			public const includeAllRecordsOption:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateSubsets);
			private var setToIndex:int = -1;
			
			override protected function constructor():void
			{
				super.constructor();
				
				minimizable.value = false;
				maximizable.value = false;
				pinned.value = true;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				Weave.savedSubsetsKeyFilters.addGroupedCallback(this, updateSubsets, true);
				getCallbackCollection(Weave.defaultSubsetKeyFilter).addGroupedCallback(this, handleGlobalSubsetChange);
			}
			private function handleGlobalSubsetChange():void
			{
				if( !Weave.defaultSubsetKeyFilter.included.keys.length ) // IF SHOWING ALL RECORDS
					subsetSelectorBox.selectedIndex = -1;
			}
			private function updateSubsets():void
			{
				var list:Array = Weave.savedSubsetsKeyFilters.getObjects();
				if (includeAllRecordsOption.value)
					list.unshift(false);
				subsetSelectorBox.dataProvider = list;
				if( setToIndex >= 0 )
				{
					subsetSelectorBox.selectedIndex = setToIndex;
					setToIndex = -1;
				}
			}
			public function selectItem(name:String):void
			{
				setToIndex = Weave.savedSubsetsKeyFilters.getNames().indexOf(name);
			}
			/**
			 * Function used solely to get the label for each list item
			 **/
			private function subsetsListLabelFunction(item:Object):String
			{
				if (!item)
					return lang("All records");
				
				// the label will be the name of the item followed by the included/excluded records count
				var label:String = Weave.savedSubsetsKeyFilters.getName(item as ILinkableObject);
				return label + " (" + getKeyFilterRecordsText(label) + ")";
			}
			
			/**
			 * Function used solely to get a string that says the number of records in either the included or excluded key sets
			 **/
			private function getKeyFilterRecordsText(keyFilterName:String):String
			{
				// get the subset by its name
				var keyFilter:KeyFilter = (Weave.savedSubsetsKeyFilters.getObject(keyFilterName) as KeyFilter);
				
				// create a string for the number of included keys followed by " records"
				// if the excluded keys are used instead, the string will be excluded keys followed by " excluded records"
				if (keyFilter.includeMissingKeys.value && keyFilter.excluded.keys.length > 0)
					return keyFilter.excluded.keys.length + lang(' excluded records');
				else
					return keyFilter.included.keys.length + lang(' records');
			}
			
			protected function itemSelected():void
			{
				if (subsetSelectorBox.selectedIndex == -1) return;
				
				var subset:KeyFilter = subsetSelectorBox.selectedItem as KeyFilter;
				if (subset)
					copySessionState(subset, Weave.defaultSubsetKeyFilter);
				else
					Weave.defaultSubsetKeyFilter.replaceKeys(true, true); // all records
				// reset the selected item to what it was before we set the global subset
				subsetSelectorBox.selectedItem = subset;
			}
		]]>
	</mx:Script>
	<ControlPanel>
		<mx:VBox label="{lang('Settings')}">
			<mx:CheckBox label='Include "All Records" option' creationComplete="linkBindableProperty(includeAllRecordsOption, event.target, 'selected')"/>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ControlPanel>
</DraggablePanel>
