<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
LinkableObjectGrid
<br/>This class is a temporary solution designed specifically for the EquationEditor
@kmanohar
-->

<mx:DataGrid xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" minWidth="0"
		 backgroundAlpha="0.5" borderStyle="inset"
		 editable="true"
		 itemEditEnd="variableNameChangeHandler(event)"
		 >
	<mx:columns>		
		<mx:DataGridColumn id="nameCol" headerText="{lang('Edit variable name:')}" labelFunction="nameFunction" editable="true"/>
		<mx:DataGridColumn headerText="{lang('Variable value')}" labelFunction="setLabel" editable="false"/>
	</mx:columns>
	
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			import mx.utils.StringUtil;
			
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.core.SessionManager;
			import weave.utils.ColumnUtils;
						
			// This is a pointer to an existing object map.  Do not create a new private one. 
			private var _hashMap:ILinkableHashMap = null; // <- do not create a new object map						
			
			[Inspectable] public function set hashMap(value:ILinkableHashMap):void
			{
				if (_hashMap == value)
					return;
				// remove callback from previous object map
				if (_hashMap != null)
					getCallbackCollection(_hashMap).removeCallback(updateDataProvider);
					
				if (value != null)
					dynamicObject = null;

				// add callback to new object map	
				_hashMap = value;
				if (_hashMap != null)
					getCallbackCollection(_hashMap).addGroupedCallback(this, updateDataProvider);
				
				updateDataProvider();
			}
			public function get hashMap():ILinkableHashMap
			{
				if (_hashMap && (WeaveAPI.SessionManager as SessionManager).objectWasDisposed(_hashMap))
				{
					hashMap = null;
				}
				
				return _hashMap;
			}
			
			private var _dynamicObject:ILinkableDynamicObject = null;
			public function get dynamicObject():ILinkableDynamicObject
			{
				if (_dynamicObject && (WeaveAPI.SessionManager as SessionManager).objectWasDisposed(_dynamicObject))
				{
					dynamicObject = null;
				}
				
				return _dynamicObject;
			}
			[Inspectable] public function set dynamicObject(value:ILinkableDynamicObject):void
			{
				if (_dynamicObject == value)
					return;
				// remove callback from previous object map
				if (_dynamicObject != null)
					getCallbackCollection(_dynamicObject).addGroupedCallback(this, updateDataProvider);
				
				if (value != null)
					hashMap = null;
				
				// add callback to new object map	
				_dynamicObject = value;
				if (_dynamicObject != null)
					getCallbackCollection(_dynamicObject).addGroupedCallback(this, updateDataProvider);
				
				updateDataProvider();
				
				this.rowCount = 1;
				//this.maxHeight = 10;
			}
			
			private function updateDataProvider():void
			{
				if (dynamicObject)
				{
					dataProvider = dynamicObject.internalObject;
				}
				else if (hashMap)
				{
					dataProvider = hashMap.getObjects();
				}

				var view:ICollectionView = dataProvider as ICollectionView;
				if (view)
					view.refresh();
			}
			
			public function removeAllItems():void
			{
				if (hashMap)
					hashMap.removeAllObjects();
				else if (dynamicObject)
					dynamicObject.removeObject();
			}
				
			public function removeSelectedItem():void
			{
				if (hashMap && selectedIndex >= 0)
				{
					var names:Array = [];
					for (var i:int = 0; i < selectedIndices.length; i++)
					{
						var selectedIndex:int = selectedIndices[i];
						
						names.push(hashMap.getName(dataProvider[selectedIndex] as ILinkableObject) );
					}	
					
					for each(var name:String in names)
					{
						hashMap.removeObject(name);
					}
				}
				else if (dynamicObject)
				{
					dynamicObject.removeObject();
				}
			}
			
			
			
			// generates a label for an item in the list
			public function setLabel(item:Object, column:DataGridColumn):String
			{
				var label:String = "";
				
				if(hashMap)
					label = hashMap.getName(item as ILinkableObject);
				if(dynamicObject)
					label = dynamicObject.globalName || getQualifiedClassName(item).split("::")[1];
				
				if (item is IAttributeColumn)
				{
					var col:IAttributeColumn = item as IAttributeColumn;
					var title:String = ColumnUtils.getTitle(col);
					var keyType:String = ColumnUtils.getKeyType(col);
					var dataType:String = ColumnUtils.getDataType(col);
					if (!dataType)
						return StringUtil.substitute("{0} (Key Type: {1})", title, keyType);
					return StringUtil.substitute("{0} ({1} -> {2})", title, keyType, dataType);
				}
				else
				{
					return label;
				}
			}
			
			// generates a tooltip for an item in the list
			/* private function setToolTip(item:Object):String
			{
				return setLabel(item);
			} */
			
			// this function updates the sessioned name order based on what is in the data provider
			private function updateHashMapNameOrder():void
			{
				validateNow();
				
				if (hashMap)
				{
					// update object map name order based on what is in the data provider
					var newNameOrder:Array = [];
					for (var i:int = 0; i < dataProvider.length; i++)
					{
						var object:ILinkableObject = dataProvider[i] as ILinkableObject;
						if (object)
							newNameOrder[i] = hashMap.getName(object);
					}
					hashMap.setNameOrder(newNameOrder);
				}
			}
			// this function removes anything from the session state not appearing in the data provider
			private function removeObjectsMissingFromDataProvider():void
			{
				if (hashMap)
				{
					var objects:Array = hashMap.getObjects();
					for each (var object:ILinkableObject in objects)
					{
						if(!(this.dataProvider as ArrayCollection).contains(object))
							hashMap.removeObject(hashMap.getName(object));
					}
				}
				else if(dynamicObject)
				{
					if(!(this.dataProvider as ArrayCollection).contains(dynamicObject.internalObject))
						dynamicObject.removeObject();
				}
			}
			
			protected function variableNameChangeHandler(event:DataGridEvent):void
			{
				var oldName:String = hashMap.getName(event.itemRenderer.data as ILinkableObject);
				var grid:DataGrid = event.target as DataGrid;
				
				if(grid)
				{
					var col:int = event.columnIndex;					
					var newValue:String = String(grid.itemEditorInstance[grid.columns[col].editorDataField]);
					
					if(newValue != oldName) {
						hashMap.renameObject(oldName, newValue);
					}
				}
			}
			
			private function nameFunction(item:Object, column:DataGridColumn):String
			{
				return hashMap.getName(item as ILinkableObject);
			}
						
		]]>
	</mx:Script>
</mx:DataGrid>
