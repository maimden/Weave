<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<ControlPanel
	xmlns="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	title="Attribute Selector"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	backgroundColor="#EFF4BC" xmlns:editors="weave.editors.*"
	>
	<mx:VBox width="100%" height="100%" id="outerVBox" verticalGap="5">
		<mx:HBox id="paramSelector" verticalAlign="middle">
			<mx:Label text="Parameter to modify:"/>
			<CustomToggleButtonBar
				id="dimensionTypeLinks"
				width="100%"
				useHandCursor="true"
				dataProvider="{selectableAttributeNames}"
				itemClick="linkToObject(selectableAttributes[event.index]);"/>
		</mx:HBox>
		<mx:VDividedBox width="100%" height="100%" id="verticalDividedBox">
			<editors:DynamicColumnEditor id="editor" width="100%" height="100%"/>
			<mx:HBox id="addColumnControls" width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Add all" click="addAll()" toolTip="Add all attributes from the selected category"/>
				<mx:Button label="Add selected" click="addSelected()"/>
			</mx:HBox>
			<ColumnListComponent id="columnList" width="100%" height="100%"/>
		</mx:VDividedBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.collections.ListCollectionView;
			import mx.controls.Label;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.disposeObjects;
			import weave.api.getCallbackCollection;
			import weave.api.ui.IVisToolWithSelectableAttributes;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ExtendedDynamicColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.ColumnReferences.HierarchyColumnReference;
			import weave.utils.HierarchyUtils;

			override protected function constructor():void
			{
				super.constructor();
				
				panelWidth.value = "50%";
				panelHeight.value = "70%";
				panelX.value = "25%";
				panelY.value = "15%";
				minimizable.value = true;
				maximizable.value = true;
				
				closeable.value = true;
				closeable.lock();
			}
			
			override protected function createChildren():void
			{
				super.createChildren();

				columnList.titleHBox.addChild(addColumnControls);
			}
			
			override public function dispose():void
			{
				super.dispose();
				disposeObjects(editor);
			}
			
			private function addAll():void
			{
				if (columnList.hashMap == null)
				{
					linkToObject(null);
					return;
				}
				
				getCallbackCollection(columnList.hashMap).delayCallbacks();
				var root:XML = editor.hierarchySelector.attributeHierarchy.value;
				var attrs:Array = (editor.hierarchySelector.attributesView.dataProvider as ListCollectionView).toArray();
				for (var i:int = 0; i < attrs.length; i++)
				{
					var attr:XML = attrs[i];
					var col:ReferencedColumn = columnList.hashMap.requestObject(null, ReferencedColumn, false);
					var ref:HierarchyColumnReference = col.dynamicColumnReference.requestLocalObject(HierarchyColumnReference, false);
					editor.copyPathToRef(HierarchyUtils.getPathFromNode(root, attr), ref);
				}
				getCallbackCollection(columnList.hashMap).resumeCallbacks();
			}
			
			private function addSelected():void
			{
				if (columnList.hashMap == null)
				{
					linkToObject(null);
					return;
				}
				columnList.hashMap.requestObjectCopy(null, editor.dynamicColumn.internalObject);
			}
			
			[Bindable] private var selectableAttributes:Array = [];
			[Bindable] private var selectableAttributeNames:Array = []; // to be used as a dataProvider for a repeater
			
			private function showOrHideParamSelector(show:Boolean):void
			{
				if (show && !paramSelector.parent)
					outerVBox.addChildAt(paramSelector,0);
				if (!show && paramSelector.parent)
					outerVBox.removeChild(paramSelector);
			}
			
			/**
			 * This function is a temporary hack.
			 */
			public static function hack_findInternalDynamicColumn(columnWrapper:IColumnWrapper):DynamicColumn
			{
				var columnWrapper:IColumnWrapper = columnWrapper as IColumnWrapper;
				if (columnWrapper)
				{
					// temporary solution - find internal dynamic column
					while (true)
					{
						if (columnWrapper.getInternalColumn() is DynamicColumn)
							columnWrapper = columnWrapper.getInternalColumn() as IColumnWrapper;
						else if (columnWrapper.getInternalColumn() is ExtendedDynamicColumn)
							columnWrapper = (columnWrapper.getInternalColumn() as ExtendedDynamicColumn).internalDynamicColumn;
						else
							break;
					}
					if (columnWrapper is ExtendedDynamicColumn)
						columnWrapper = (columnWrapper as ExtendedDynamicColumn).internalDynamicColumn;
				}
				return columnWrapper as DynamicColumn;
			}
			
			public function linkToObject(columnOrHashMap:ILinkableObject, objectTitle:String = null):void
			{
				var index:int = selectableAttributes.indexOf(columnOrHashMap);
				if (index >= 0)
				{
					objectTitle = selectableAttributeNames[index];
					title = lang("Attribute selector for ") + objectTitle;
					dimensionTypeLinks.selectedIndex = index;
					showOrHideParamSelector(true);
				}
				else
				{
					title = lang("Attribute selector");
					if (objectTitle)
						title += lang(' for ') + objectTitle;
					showOrHideParamSelector(false);
				}
				
				editor.setTarget(hack_findInternalDynamicColumn(columnOrHashMap as IColumnWrapper));
				
				if (columnOrHashMap is ILinkableHashMap)
				{

					// set path to first column.
					var columns:Array = (columnOrHashMap as ILinkableHashMap).getObjects(DynamicColumn);
					if (columns.length > 0)
					{
						copySessionState(columns[0], editor.dynamicColumn);
					}
					else
					{
						columns = (columnOrHashMap as ILinkableHashMap).getObjects(IAttributeColumn);
						if (columns.length > 0)
							editor.dynamicColumn.requestLocalObjectCopy(columns[0]);
					}
					
					var child:DisplayObject = columnList.selectorControls;
					if (child.parent)
						child.parent.removeChild(child);
					columnList.hashMap = columnOrHashMap as ILinkableHashMap;
					columnList.label = objectTitle ? objectTitle : lang('Selected attributes');
					verticalDividedBox.addChild(columnList);
				}
				else if (verticalDividedBox == columnList.parent)
				{
					verticalDividedBox.removeChild(columnList);
				}

				// set targets for ControlPanel to support session saving
				if (selectableAttributes.indexOf(columnOrHashMap) < 0)
					targets = selectableAttributes = [];
			}
			
			public static function get defaultSelector():AttributeSelectorPanel
			{
				if (!_defaultSelector)
					_defaultSelector = new AttributeSelectorPanel();
				return _defaultSelector;
			}
			public static var _defaultSelector:AttributeSelectorPanel;
			public static function openToolSelector(tool:IVisToolWithSelectableAttributes, attributeToLinkTo:ILinkableObject):void
			{
				if (!Weave.properties.enableToolControls.value)
					return;
				
				openDefaultSelector();
				
				defaultSelector.selectableAttributes = tool.getSelectableAttributes();
				if (defaultSelector.selectableAttributes.indexOf(attributeToLinkTo) >= 0)
					defaultSelector.targets = defaultSelector.selectableAttributes;
				defaultSelector.selectableAttributeNames = tool.getSelectableAttributeNames();
				defaultSelector.linkToObject(attributeToLinkTo);
			}
			public static function openDefaultSelector(linkTo:ILinkableObject = null, title:String = null):void
			{
				if (!Weave.properties.enableToolControls.value)
					return;
				
				if (!defaultSelector.parent)
					PopUpManager.addPopUp(defaultSelector, WeaveAPI.topLevelApplication as DisplayObject);

				defaultSelector.editor.clearSearch();
				
				defaultSelector.linkToObject(linkTo, title);
				defaultSelector.targets = linkTo ? [linkTo] : [];
				
				defaultSelector.restorePanel();
			}
		]]>
	</mx:Script>
</ControlPanel>
